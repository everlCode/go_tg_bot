package main

import (
	"database/sql"
	"encoding/json"
	reply_repository "go-tg-bot/internal/repository/reply"
	user_repository "go-tg-bot/internal/repository/user"
	dashboard_service "go-tg-bot/internal/services/dashboard"
	reply_service "go-tg-bot/internal/services/dashboard/replies"
	"log"
	"net/http"
	"os"
	"time"

	_ "github.com/mattn/go-sqlite3"
	"github.com/robfig/cron/v3"
	"gopkg.in/telebot.v4"
)

func main() {
	db, err := sql.Open("sqlite3", "./db/db.db")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	c := cron.New()
	c.AddFunc("0 0 * * *", func() {
		_, err := db.Exec("UPDATE users SET action = 3")
		if err != nil {
			log.Println(err)
		}
		log.Println("Cron: –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤", time.Now())
	})
	c.Start()

	userRepository := user_repository.NewRepository(db)
	replyRepository := reply_repository.NewRepository(db)
	replyService := reply_service.NewService(replyRepository, userRepository)
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	bot, err := telebot.NewBot(telebot.Settings{
		Token:  os.Getenv("TELEGRAM_BOT_TOKEN"),
		Client: &http.Client{},
	})
	if err != nil {
		log.Fatal(err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook URL
	publicURL := os.Getenv("WEBHOOK_URL")
	err = bot.SetWebhook(&telebot.Webhook{
		Endpoint: &telebot.WebhookEndpoint{
			PublicURL: publicURL,
		},
	})
	if err != nil {
		log.Fatal(err)
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
	bot.Handle("/start", func(c telebot.Context) error {
		return c.Send(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
	
		–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ—Å–µ–¥–µ –∏ –≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
		
		üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
		‚Äî –ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		‚Äî –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–Ω–∞–∫–æ–º **+** –∏–ª–∏ **-**, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å "—É–≤–∞–∂–µ–Ω–∏–µ" (—Ä–µ–π—Ç–∏–Ω–≥) –∞–≤—Ç–æ—Ä–∞.
		‚Äî –ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ 3 –¥–µ–π—Å—Ç–≤–∏–π (–æ—Ü–µ–Ω–æ–∫) –≤ –¥–µ–Ω—å.
		‚Äî –í—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ).
		
		üåê –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: https://www.everl.ru/dashboard
		
		–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ + / - –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!
		`)
	})

	mux := http.NewServeMux()

	// Telegram Webhook: –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.HandleUpdate
	mux.HandleFunc("/bot", func(w http.ResponseWriter, r *http.Request) {
		var update telebot.Update
		if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
			http.Error(w, "invalid update", http.StatusBadRequest)
			return
		}

		bot.ProcessUpdate(update)
	})

	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		log.Println("text")
		msg := c.Message()
		if msg == nil || msg.Sender == nil {
			log.Print(msg)
			return nil
		}

		id := msg.Sender.ID
		name := msg.Sender.FirstName
		userExist := userRepository.UserExist(id)

		if userExist {
			userRepository.AddUserMessageCount(id)
		} else {
			userRepository.CreateUser(id, name, 1)
		}

		return nil
	})

	bot.Handle(telebot.OnReply, func(c telebot.Context) error {
		replyService.Handle(c)

		return nil
	})

	// –°–≤–æ–π API –º–∞—Ä—à—Ä—É—Ç
	mux.HandleFunc("/dashboard", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "./static/dashboard.html")
	})
	mux.HandleFunc("/api/users", func(w http.ResponseWriter, r *http.Request) {
		//–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î

		dashboardService := dashboard_service.NewService(userRepository)
		users := dashboardService.DashboardData()

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(users)
	})

	mux.HandleFunc("/api/replies", func(w http.ResponseWriter, r *http.Request) {
		rows, err := db.Query(`SELECT * FROM replies;`)
		if err != nil {
			log.Println("error:", err)
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(rows)
	})

	env := os.Getenv("ENV")
	port := os.Getenv("PORT")
	if env == "production" {
		// –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
		certFile := os.Getenv("TLS_CERT")
		keyFile := os.Getenv("TLS_KEY")

		if certFile == "" || keyFile == "" {
			log.Fatal("TLS_CERT and TLS_KEY must be set in production")
		}

		log.Println("Starting HTTPS server on port 443")
		log.Fatal(http.ListenAndServeTLS(":443", certFile, keyFile, mux))
	} else {
		// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –æ–±—ã—á–Ω—ã–π HTTP
		log.Println("Running in local mode on http://localhost:" + port)
		log.Fatal(http.ListenAndServe(":"+port, mux))
	}

}
