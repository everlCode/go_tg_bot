package main

import (
	"bytes"
	"database/sql"
	"encoding/json"
	reaction_repository "go-tg-bot/internal/repository"
	message_repository "go-tg-bot/internal/repository/message"
	reply_repository "go-tg-bot/internal/repository/reply"
	report_repository "go-tg-bot/internal/repository/report"
	user_repository "go-tg-bot/internal/repository/user"
	dashboard_service "go-tg-bot/internal/services/dashboard"
	message_service "go-tg-bot/internal/services/dashboard/messages"
	"go-tg-bot/internal/services/gigachad"
	stat_service "go-tg-bot/internal/services/stat"
	"io"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/joho/godotenv"
	_ "github.com/mattn/go-sqlite3"
	"github.com/robfig/cron/v3"
	"gopkg.in/telebot.v4"
)

func main() {
	err := godotenv.Load(".env") // —É–∫–∞–∂–∏ –ø—É—Ç—å –¥–æ .env
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %v", err)
	}
	db, err := sql.Open("sqlite3", "./db/db.db")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	userRepository := user_repository.NewRepository(db)
	replyRepository := reply_repository.NewRepository(db)
	messageRepository := message_repository.NewRepository(db)
	reactionRepository := reaction_repository.NewRepository(db)
	reportRepository := report_repository.NewRepository(db)
	dashboardService := dashboard_service.NewService(userRepository)
	messageService := message_service.NewService(replyRepository, userRepository, messageRepository, reactionRepository)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	bot, err := telebot.NewBot(telebot.Settings{
		Token:  os.Getenv("TELEGRAM_BOT_TOKEN"),
		Client: &http.Client{},
	})
	if err != nil {
		log.Fatal(err)
	}

	c := cron.New()
	c.AddFunc("0 0 * * *", func() {
		_, err := db.Exec("UPDATE users SET action = 10")
		if err != nil {
			log.Println(err)
		}
		log.Println("Cron: –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤", time.Now())
	})

	c.AddFunc("30 21 * * *", func() {
		messages := messageRepository.GetMessagesForToday()

		content := messageService.FormatMessagesForGigaChat(messages)

		gigaChatApi, _ := gigachad.NewApi()
		result := gigaChatApi.Send(content)

		txt := result.Choices[0].Message.Content

		bot.Send(telebot.ChatID(-4204971428), txt)
		reportRepository.Create(txt)
	})

	c.AddFunc("0 8 * * 1", func() {
		service := stat_service.NewService(db, *messageRepository, userRepository, *reactionRepository)
		stats := service.WeekStat()

		response := service.FormatDataForWeekReport(stats)

		bot.Send(telebot.ChatID(-4204971428), response, telebot.ModeHTML)
	})
	c.Start()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
	bot.Handle("/start", func(c telebot.Context) error {
		return c.Send(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
	
		–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ—Å–µ–¥–µ –∏ –≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
		
		üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
		‚Äî –ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		‚Äî –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —ç–º–æ–¥–∑–∏ ‚ù§Ô∏è, üëç, üî• –∏–ª–∏ üëé, üí©, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å "—É–≤–∞–∂–µ–Ω–∏–µ" (—Ä–µ–π—Ç–∏–Ω–≥) –∞–≤—Ç–æ—Ä–∞.
		‚Äî –ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ 10 –¥–µ–π—Å—Ç–≤–∏–π (–æ—Ü–µ–Ω–æ–∫) –≤ –¥–µ–Ω—å.
		‚Äî –í—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ).
		
		üåê –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: https://www.everl.ru/dashboard
		`)
	})

	mux := http.NewServeMux()

	// Telegram Webhook: –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.HandleUpdate
	mux.HandleFunc("/bot", func(w http.ResponseWriter, r *http.Request) {
		log.Println("BOT")
		bodyBytes, _ := io.ReadAll(r.Body)

		r.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
		var update telebot.Update

		if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
			http.Error(w, "invalid update: ", http.StatusBadRequest)
			log.Println(err)
			return
		}

		bot.ProcessUpdate(update)
		//–∫–æ—Å—Ç—ã–ª—å, –≤–ª–∏–±–µ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
		if update.MessageReaction != nil {
			messageService.HandleReaction(update.MessageReaction)
		}

	})

	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		u := c.Update()
		log.Println(u)
		messageService.Handle(c)

		return nil
	})

	bot.Handle(telebot.OnMedia, func(c telebot.Context) error {
		messageService.Handle(c)
		return nil
	})

	// –°–≤–æ–π API –º–∞—Ä—à—Ä—É—Ç
	mux.HandleFunc("/dashboard", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "./static/dashboard.html")
	})

	mux.HandleFunc("/image", func(w http.ResponseWriter, r *http.Request) {
		gigaChatApi, _ := gigachad.NewApi()
		report, err := reportRepository.GetLast()
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞:", err)
		}

		imgData, _ := gigaChatApi.GenerateImage("–ù–∞—Ä–∏—Å—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ—Ç—á–µ—Ç—É –∑–∞ –¥–µ–Ω—å: " + report.Text)

		photo := &telebot.Photo{
			File:    telebot.FromReader(bytes.NewReader(imgData)),
			Caption: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω—è!",
		}
		_, e := bot.Send(telebot.ChatID(1425523987), photo)
		if e != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞:", err)
		}
	})

	mux.HandleFunc("/gigachat", func(w http.ResponseWriter, r *http.Request) {
		messages := messageRepository.GetMessagesForToday()
		if len(messages) == 0 {
			w.Write([]byte("No messages"))
		}

		content := messageService.FormatMessagesForGigaChat(messages)
		log.Println(content)
		gigaChatApi, err := gigachad.NewApi()
		result := gigaChatApi.Send(content)

		if err != nil {
			http.Error(w, "Failed to get API token: "+err.Error(), http.StatusInternalServerError)
			return
		}
		//bot.Send(telebot.ChatID(-4204971428), result.Choices[0].Message.Content)
		// bot.Send(telebot.ChatID(-4204971428), "TEST")
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(result)
	})

	bot.Handle("/top", func(c telebot.Context) error {
		top := dashboardService.UsersTop()
		return c.Send(top, "HTML")
	})

	mux.HandleFunc("/api/users", func(w http.ResponseWriter, r *http.Request) {
		users := dashboardService.DashboardData()

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(users)
	})

	mux.HandleFunc("/api/replies", func(w http.ResponseWriter, r *http.Request) {
		rows := replyRepository.All()
		defer rows.Close()

		var replies []reply_repository.Reply
		for rows.Next() {
			var id, from, to int
			var text string
			if err := rows.Scan(&id, &from, &to, &text); err != nil {
				log.Println("Row scan error:", err)
				return
			}
			replies = append(replies, reply_repository.Reply{
				ID:   id,
				From: from,
				To:   to,
				Text: text,
			})

		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(replies)
	})

	mux.HandleFunc("/setwebhook", func(w http.ResponseWriter, r *http.Request) {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook URL
		publicURL := os.Getenv("WEBHOOK_URL")
		err = bot.SetWebhook(&telebot.Webhook{
			Endpoint: &telebot.WebhookEndpoint{
				PublicURL: publicURL,
			},
			AllowedUpdates: []string{"message", "message_reaction"},
		})
		if err != nil {
			log.Fatal(err)
		}
	})

	env := os.Getenv("ENV")
	port := os.Getenv("PORT")
	if env == "production" {
		// –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
		certFile := os.Getenv("TLS_CERT")
		keyFile := os.Getenv("TLS_KEY")

		if certFile == "" || keyFile == "" {
			log.Fatal("TLS_CERT and TLS_KEY must be set in production")
		}

		log.Println("Starting HTTPS server on port 443")
		log.Fatal(http.ListenAndServeTLS(":443", certFile, keyFile, mux))
	} else {
		// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –æ–±—ã—á–Ω—ã–π HTTP
		log.Println("Running in local mode on http://localhost:" + port)
		log.Fatal(http.ListenAndServe(":"+port, mux))
	}

}
