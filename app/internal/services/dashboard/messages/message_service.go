package message_service

import (
	reaction_repository "go-tg-bot/internal/repository"
	message_repository "go-tg-bot/internal/repository/message"
	reply_repository "go-tg-bot/internal/repository/reply"
	user_repository "go-tg-bot/internal/repository/user"
	"log"
	"strings"
	"time"

	"gopkg.in/telebot.v4"
)

type MessageService struct {
	rr                 reply_repository.ReplyRepository
	ur                 user_repository.UserRepository
	mr                 message_repository.MessageRepository
	reactionRepository reaction_repository.ReactionRepository
	PositiveEmodji     []string
	NegativeEmodji     []string
}

func NewService(
	rr reply_repository.ReplyRepository,
	ur user_repository.UserRepository,
	mr *message_repository.MessageRepository,
	reactionRepository *reaction_repository.ReactionRepository,
) MessageService {
	return MessageService{
		rr:                 rr,
		ur:                 ur,
		mr:                 *mr,
		reactionRepository: *reactionRepository,
		PositiveEmodji:     []string{"üëç", "üî•", "\u2764"},
		NegativeEmodji:     []string{"üëé", "üí©"},
	}
}

func (rs *MessageService) Handle(c telebot.Context) {
	msg := c.Message()
	if msg == nil || msg.Sender == nil {
		return
	}

	id := msg.Sender.ID
	msgId := msg.ID
	name := msg.Sender.FirstName
	text := rs.getText(msg)

	userExist := rs.ur.UserExist(id)
	if !userExist {
		rs.ur.CreateUser(id, name, 1)
	}

	rs.mr.Create(msgId, id, text, msg.Unixtime)
	rs.ur.AddUserMessageCount(id)

	if msg.IsReply() {
		rs.HandleReply(msg)
	}
}

func (rs *MessageService) getText(msg *telebot.Message) string {
	if msg.Text != "" {
		return msg.Text
	}
	if msg.VideoNote != nil {
		return "–í–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫"
	}

	if msg.Photo != nil {
		return "–§–æ—Ç–æ"
	}

	return ""
}

func (rs *MessageService) HandleReply(msg *telebot.Message) {

	replyToId := msg.ReplyTo.Sender.ID
	text := msg.Text
	fromId := msg.Sender.ID

	rs.rr.Add(fromId, replyToId, text)
}

func (rs *MessageService) HandleReaction(reaction *telebot.MessageReaction) {
	if reaction == nil || len(reaction.NewReaction) == 0 {
		return
	}
	react := reaction.NewReaction[0]
	userFromId := reaction.User.ID

	rs.reactionRepository.Add(userFromId, int64(reaction.MessageID), react.Emoji)

	message := rs.mr.GetById(reaction.MessageID)

	if message == nil {
		return
	}

	if message.FromUser == int(userFromId) {
		return
	}

	user := rs.ur.UserByTelegramId(userFromId)

	if user == nil || user.Action < 1 {
		return
	}

	for _, v := range rs.PositiveEmodji {
		if v == react.Emoji {
			rs.ChangeRespect(message.FromUser, 1)
			rs.DecreaseAction(userFromId)
			break
		}
	}
	for _, v := range rs.NegativeEmodji {
		if v == react.Emoji {
			rs.ChangeRespect(message.FromUser, -1)
			rs.DecreaseAction(userFromId)
			break
		}
	}
}

func (rs *MessageService) ChangeRespect(id int, rate int) {
	log.Println("Change respect ")
	rs.ur.AddRespect(id, rate)
}

func (rs *MessageService) DecreaseAction(id int64) {
	rs.ur.DecreaseAction(id)
}

func (service MessageService) FormatMessagesForGigaChat(messages []message_repository.Message) string {
	names := map[int]string{
		853082525:  "–†–æ–º–∞–Ω",
		1425523987: "–ù–∏–∫–æ–ª–∞–π",
		6163710268: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
		987031755:  "–ú–∞–∫—Å–∏–º",
		1245777783: "–ò–≤–∞–Ω",
		1095940542: "–ê–Ω–¥—Ä–µ–π",
		302048098:  "–ê–Ω–¥—Ä–µ–π",
		812431129:  "–ò–ª—å—è",
		788769106:  "–ú–∞–∫–∞—Ä",
	}

	content := `–ü—Ä–æ—á–∏—Ç–∞–π –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ —á–∞—Ç–µ –¥—Ä—É–∑–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ù–∞ –æ—Å–æ–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä, —É–ª–æ–∂–∏—Å—å –≤ 25 —Å–ª–æ–≤."
	–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \n`

	for _, msg := range messages {
		text := service.deleteBadWords(msg.Text)
		time := time.Unix(
			int64(msg.SendAt),
			0,
		).Format("15:04")
		content += names[msg.UserId] + ": " + text + " " + time + "\n"
	}
	return content
}

func (service MessageService) deleteBadWords(message string) string {
	lower := strings.ToLower(message)
	for _, word := range badWords {
		wordLower := strings.ToLower(word)
		for {
			idx := strings.Index(lower, wordLower)
			if idx == -1 {
				break
			}
			// –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ (—Å–æ—Ö—Ä–∞–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
			message = message[:idx] + message[idx+len(word):]
			lower = strings.ToLower(message)
		}
	}

	return message
}

var badWords = []string{
	"—Å—É–∫–∞", "—Å—É—á–∞—Ä–∞", "—Å—É—á–∫–∞",
	"–ø–∏–∑–¥–µ—Ü", "–ø–∏–∑–¥–∞", "–ø–∏–∑–¥–µ", "–ø–∏–∑–¥—É", "–ø–∏–∑–¥–æ–±–æ–ª", "–ø–∏–∑–¥–∞–±–æ–ª", "–ø–∏–∑–¥",
	"–Ω–∞—Ö—É–π", "–Ω–∞ —Ö—É–π", "—Ö—É–π", "—Ö—É–µ–≤—ã–π", "—Ö—É–µ–≤", "–Ω–∏—Ö—É—è", "–æ—Ö—É–µ–Ω", "–æ—Ö—É–µ—Ç—å", "—Ö—É–ª–∏", "—Ö—É—è—Ä–∏—Ç—å", "—Ö—É—è—Ä", "–∞—Ö—É–µ", "—Ö—É–µ", "—Ö—É–∏", "—Ö—É—è",
	"–∑–∞—Ö—É—è—Ä—å",
	"–µ–±–ª–∞–Ω", "–µ–±–ª–∞–Ω–∏—â–µ", "–µ–±–ª–∏—â–µ", "–µ–±–∏—Å—å", "–∑–∞–µ–±—Ü–∞", "–∑–∞–µ–±", "–µ–±–ª–æ", "–µ–±–∞—Ç—å", "–µ–±–∞–Ω–Ω—ã–π", "–µ–±–∞–Ω—ã–π", "–µ–±–∞–Ω", "–µ–±–∞—Ç", "–µ–±–ª—è", "–µ–±–ª–∏",
	"–µ–±–∞–ª", "—Ä–∞–∑—å–µ–±", "—Ä–∞–∑—å—ë", "–µ–±—É—á", "–µ–±—É", "–≤—å–µ–±", "–≤—ä–µ–±", "–≤—ä–µ–±–∏–∫–∞", "—ë–±", "–µ–±",
	"–ø–∏–¥–∞—Ä", "–ø–∏–¥–æ—Ä", "–ø–∏–¥–∞—Ä–∞—Å", "–ø–∏–¥—Ä–∏–ª–∞",
	"–±–ª—è", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–±–ª ", "–±–ª\n", "–±–ª—è–¥–∏", "–±–ª—è–¥—Å",
	"–≥–∞–Ω–¥–æ–Ω", "–≥–æ–Ω–¥–æ–Ω",
	"—Ç–≤–∞—Ä—å", "—Ç–≤–∞—Ä",
	"–¥–æ–ª–±–æ–µ–±", "–¥–æ–ª–±–æ—è", "–¥–∞—É–Ω", "–¥–∏–±–∏–ª",
	"–≥–æ–≤–Ω",
}
