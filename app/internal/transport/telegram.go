package transport

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"log/slog"
	"net/http"

	"go-tg-bot/internal/services"

	"gopkg.in/telebot.v4"
)

type Telegram struct {
	bot      *telebot.Bot
	services *services.Services
	log      *slog.Logger
}

func NewTelegram(token string, services *services.Services, log *slog.Logger) (*Telegram, error) {
	bot, err := telebot.NewBot(telebot.Settings{
		Token:  token,
		Client: &http.Client{},
	})
	if err != nil {
		return nil, err
	}

	tg := &Telegram{
		bot:      bot,
		services: services,
		log:      log,
	}

	tg.registerHandlers()

	return tg, nil
}

func (t *Telegram) registerHandlers() {
	// –ö–æ–º–∞–Ω–¥–∞ /start
	t.bot.Handle("/start", func(c telebot.Context) error {
		return c.Send(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
		
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
		
üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚Äî –°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
‚Äî –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (‚ù§Ô∏è, üëç, üî•, ü•∞, ‚ù§Ô∏è‚Äçüî•, üëé, üí©).
‚Äî –õ–∏–º–∏—Ç 10 –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å.
‚Äî –í–µ–±-–ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: https://www.everl.ru/dashboard
`)
	})

	// –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	t.bot.Handle(telebot.OnText, func(c telebot.Context) error {
		t.services.Messages.Handle(c)
		return nil
	})

	// –ú–µ–¥–∏–∞
	t.bot.Handle(telebot.OnMedia, func(c telebot.Context) error {
		t.services.Messages.Handle(c)
		return nil
	})

	// –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	t.bot.Handle("/top", func(c telebot.Context) error {
		top := t.services.Dashboard.UsersTop()
		return c.Send(top, telebot.ModeHTML)
	})
}

// Webhook HTTP endpoint (–¥–ª—è mux.HandleFunc("/bot", ...))
func (t *Telegram) HandleWebhook(w http.ResponseWriter, r *http.Request) {
	bodyBytes, _ := io.ReadAll(r.Body)
	defer r.Body.Close()

	r.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))
	var update telebot.Update
	if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
		http.Error(w, "55555", http.StatusBadRequest)
		t.log.Error("telegram webhook decode error", "err", err)
		return
	}
	log.Println("333333333")
	t.bot.ProcessUpdate(update)

	// –∫–æ—Å—Ç—ã–ª—å: –≤ –ª–∏–±–µ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
	if update.MessageReaction != nil {
		t.services.Messages.HandleReaction(update.MessageReaction)
	}
}

// –ó–∞–ø—É—Å–∫ (–¥–ª—è long polling, –µ—Å–ª–∏ –±–µ–∑ webhook)
func (t *Telegram) Run() {
	t.log.Info("starting telegram bot (long polling)")
	t.bot.Start()
}

// –î–æ—Å—Ç—É–ø –∫ bot (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ cron)
func (t *Telegram) Bot() *telebot.Bot {
	return t.bot
}
